{"version":3,"sources":["TriviaQ.js","math.js","trivia.js","year.js","App.js","serviceWorker.js","index.js"],"names":["triviaQ","props","capitalizedString","charAt","toUpperCase","slice","react_default","a","createElement","mathHeader","className","triviaHeader","yearHeader","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","triviaFacts","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","setState","factType","callAPIFact","stop","mathFacts","_callee2","_context2","yearFacts","_callee3","_context3","numberSubmit","event","preventDefault","newNumber","document","getElementById","value","alert","Math","floor","randomNumber","userNumberChange","state","triviaMessage","isFetching","bind","assertThisInitialized","componentDidMount","APISite","fetch","headers","X-RapidAPI-Host","X-RapidAPI-Key","then","response","ok","Error","status","statusText","results","json","_this2","RandomNumber","number","text","catch","error","id","react_router_dom","react_router","exact","path","component","ButtonToolbar","to","Button","variant","onClick","DropdownButton","title","Dropdown","Item","href","InputGroup","placeholder","type","Append","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7fdc8b08.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst triviaQ = (props)=>{\r\n    // capitalizes first letter of string\r\n    let capitalizedLetter = props.charAt(0).toUpperCase();\r\n    // adds capitalized letter to rest of string\r\n    let capitalizedString = capitalizedLetter + props.slice(1);\r\n    // dynamically displays string as it changes through API calls\r\n    \r\n    return <p>{capitalizedString}</p>;\r\n}\r\n\r\nexport default triviaQ;","import React from 'react';\r\n\r\n// returns header for math hash\r\nconst mathHeader = ()=>{\r\n    return (\r\n            <h2 className = \"trivia-header\">Currently showing: Math Trivia</h2>          \r\n    )\r\n}\r\n\r\nexport default mathHeader;","import React from 'react';\r\n\r\n// returns header for trivia hash\r\nconst triviaHeader = ()=>{\r\n    return (\r\n            <h2 className = \"trivia-header\">Currently showing: Numbers Trivia</h2>        \r\n        \r\n    )\r\n}\r\n\r\nexport default triviaHeader;","import React from 'react';\r\n\r\n// returns header for year hash\r\nconst yearHeader = ()=>{\r\n    return (\r\n            <h2 className = \"trivia-header\">Currently showing: Year Trivia</h2>        \r\n    )\r\n}\r\n\r\nexport default yearHeader;","import {ButtonToolbar, Button, InputGroup, Dropdown, DropdownButton} from 'react-bootstrap';\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\nimport {Route, HashRouter, Link} from 'react-router-dom';\r\nimport triviaQ from './TriviaQ.js';\r\nimport mathHeader from './math.js'\r\nimport triviaHeader from './trivia.js'\r\nimport yearHeader from './year.js'\r\n\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            triviaMessage : 'test',\r\n            factType : 'trivia',\r\n            randomNumber : 42,\r\n            isFetching : true,\r\n            userNumberChange : false\r\n        };\r\n        this.triviaFacts = this.triviaFacts.bind(this);\r\n        this.mathFacts = this.mathFacts.bind(this);\r\n        this.yearFacts = this.yearFacts.bind(this);\r\n        this.componentDidMount = this.componentDidMount.bind(this);\r\n        this.callAPIFact = this.callAPIFact.bind(this);\r\n        this.numberSubmit = this.numberSubmit.bind(this);\r\n    }\r\n\r\n    // 3 functions below change type of facts called from API\r\n    triviaFacts = async () => {\r\n        await this.setState({factType: 'trivia' })\r\n        // giving delayed trivia question once again, showing delayed q in props too\r\n        this.callAPIFact()\r\n    }\r\n\r\n     mathFacts = async () => {\r\n        await this.setState({factType: 'math'})\r\n        // giving delayed trivia question once again, showing delayed q in props too\r\n        this.callAPIFact()\r\n    }\r\n\r\n    yearFacts = async () => {\r\n        await this.setState({factType: 'year'})\r\n        // giving delayed trivia question once again, showing delayed q in props too\r\n        this.callAPIFact()\r\n    }\r\n\r\n    numberSubmit = event => {\r\n        // prevents page reload\r\n        event.preventDefault();\r\n        // collects user submitted value from DOM\r\n        let newNumber = document.getElementById('user-submitted-number').value\r\n        // checks value of submitted number to make sure it's greater than 0\r\n        if (newNumber === '' || newNumber < 0 ){\r\n            alert(\"Integer greater than -1 must be entered, please try again!\")\r\n        } else {\r\n        newNumber = Math.floor(newNumber)\r\n        this.setState({randomNumber: newNumber})\r\n        this.setState({userNumberChange: true})\r\n        }\r\n    }\r\n\r\n    // function to access API for facts repeatedly\r\n    async callAPIFact() {\r\n        this.setState({isFetching: true})\r\n        let APISite = `https://numbersapi.p.rapidapi.com/${this.state.randomNumber}/${this.state.factType}?fragment=true&notfound=floor&json=true`\r\n            await fetch(APISite, {\r\n            headers: {\r\n            \"X-RapidAPI-Host\": \"numbersapi.p.rapidapi.com\",\r\n            \"X-RapidAPI-Key\": \"9de36c8109msh4dc64975bcf7843p13ab52jsn921ab8e4043b\"\r\n            }\r\n        })\r\n        .then( response => {if (!response.ok) {\r\n                throw Error(response.status + ' ' + response.statusText);\r\n            }\r\n            return response;\r\n        })\r\n        .then( results => results.json())\r\n        .then( results => {let triviaFacts = results\r\n        // terminates loading screen\r\n        this.setState({isFetching: false})\r\n        // sets boolean to display label for fetched fact\r\n        this.setState({userNumberChange : false})\r\n        // saves number & fact into App state\r\n        this.setState({RandomNumber : triviaFacts.number})\r\n        this.setState({triviaMessage : triviaFacts.text})})\r\n        // displays error in case fetch error from server\r\n        .catch((error) => {\r\n            alert(error + \" received from server. Please reload and try again!\")    \r\n        }) \r\n    }\r\n\r\n    \r\n  // fetches data from API with headers\r\n  async componentDidMount() {\r\n      await this.callAPIFact()\r\n  }\r\n  \r\n    \r\n    render(){\r\n    // displays loading text\r\n    if (this.state.isFetching) {\r\n        return (\r\n            <div id=\"populate-text\">Loading...</div>\r\n        )\r\n    } else {\r\n        \r\n        return (\r\n            // display buttons, populate-text div\r\n            <div className=\"container-fluid\">\r\n                <HashRouter>\r\n                <div className=\"trivia-header\">\r\n                    {/* Routing for buttons */}\r\n                    <Route exact path = \"/\" component = {triviaHeader}/>\r\n                    <Route path = \"/math\" component = {mathHeader} />\r\n                    <Route path = \"/year\" component = {yearHeader}/>\r\n                </div>\r\n                <div className=\"trivia-application trivia-buttons\">\r\n                    {/* button links and listen events */}\r\n                    <ButtonToolbar className=\"trivia-application button-bar\">\r\n                    <Link to =\"/\"><Button variant=\"primary\" onClick={this.triviaFacts}>Numbers Trivia</Button></Link>\r\n                    <Link to =\"/math\"><Button variant=\"success\" onClick={this.mathFacts}>Math Trivia</Button></Link>\r\n                    <Link to =\"/year\"><Button variant=\"info\" onClick={this.yearFacts}>Year Trivia</Button></Link>\r\n                    </ButtonToolbar>\r\n                    <DropdownButton id=\"dropdown-selector\" title=\"Change Trivia Type Here\">\r\n                        <Dropdown.Item href=\"#/\" onClick={this.triviaFacts}>Numbers Trivia</Dropdown.Item>\r\n                        <Dropdown.Item href=\"#/math\" onClick={this.mathFacts}>Math Trivia</Dropdown.Item>\r\n                        <Dropdown.Item href=\"#/year\" onClick={this.yearFacts}>Years Trivia</Dropdown.Item>\r\n                    </DropdownButton>\r\n                </div>\r\n                </HashRouter>\r\n                <div className=\"center-application\" id=\"populate-text\">\r\n                    {triviaQ(this.state.triviaMessage)}\r\n                </div>\r\n                <div className =\"center-application\">\r\n                    <button onClick={this.callAPIFact}>New Fetch</button>\r\n                    <form className=\"trivia-label\" id=\"number-selector\">\r\n                        <InputGroup className=\"mb-3\">\r\n                            Enter a non-negative integer you'd like to see random trivia for!\r\n                            <br></br>\r\n                            <div className =\"input-group mb3\">\r\n                            <input \r\n                                placeholder=\"Enter number here\"\r\n                                id = \"user-submitted-number\" \r\n                                className = \"form-control text-box\" \r\n                                type = \"number\"/>\r\n                            <InputGroup.Append>\r\n                            <Button \r\n                                variant=\"outline-secondary\"\r\n                                className=\"btn btn-outline-dark\" \r\n                                type = \"submit\" \r\n                                onClick={this.numberSubmit}>\r\n                            Submit</Button>\r\n                            </InputGroup.Append> \r\n                            </div>\r\n                        </InputGroup>\r\n                        <div id = \"display-number\">\r\n                            {/* label which changes text based on if a new number had been entered by user */}\r\n                            <label>\r\n                                {this.state.userNumberChange ? \"Will show\" : \"Currently showing\"} facts for: {this.state.randomNumber}\r\n                            </label>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n             \r\n        );\r\n    }}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './css/StyleSheet.css'\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}